#!/bin/sh

# OUTSTANDING TASKS
# -----------------
#  1. Already tested on AIX and CentOS.  Not tested on Ubuntu,SunOS,HPUX,*BSD,MacOS.  If you test on a new UNIX flavour, please inform the author.
#  2. Check to see if modern FreeBSD is using a local nameserver cache instead of BIND
#  3. Detect runining OS and set appropriate switches for ps   (use -ef on AIX and Linux, -aux on *BSD and MacOS)


# CHANGE LOG
# ----------
#  2019/03/07   njeffrey    Script created
#  2019/03/11   njeffrey    Confirm A   record exists for localhost
#  2019/03/11   njeffrey    Confirm PTR record exists for 127.0.0.1
#  2019/03/11   njeffrey    Switch from nslookup to dig, as nslookup is deprecated.
#  2019/03/11   njeffrey    Confirm the IP address specified in the PTR record is bound to a local network interface
#  2019/03/11   njeffrey    Check IP addresses bound to network interfaces with ifconfig -a or ip addr show
#  2022/05/17   njeffrey    Additional error-checks for Linux hosts using systemd-resolved for name resolution
#  2022/05/17   njeffrey    Break up code into functions
#  2022/06/20   njeffrey    Add nagios performance data to output 
#  2022/09/26   njeffrey    Remove bash-ism "function" keyword, does not work on /usr/bin/dash on Ubuntu



# NOTES
# -----
# nagios check to perform the following DNS sanity checks:
#   - confirm the current machine has forward and reverse name resolution (A and PTR records in DNS)
#   - confirm the local IP address is not 0.0.0.0
#   - confirm that localhost resolves to 127.0.0.1
#
#  This script is executed remotely on a monitored system by the NRPE or check_by_ssh
#  methods available in nagios.
#
#  If you hare using the check_by_ssh method, you will need a section in the services.cfg
#  file on the nagios server that looks similar to the following.
#  This assumes that you already have ssh key pairs configured.
#      define service {
#              use                             generic-service
#              hostgroup_name                  all_aix,all_linux
#              service_description             DNS
#              check_command                   check_by_ssh!/usr/local/nagios/libexec/check_dns_unix
#              }
#
#
#  Alternatively, if you are using the NRPE method, you should have a section similar to the following in
#  the services.cfg file:
#      define service{
#               use                             generic-service
#               hostgroup_name                  all_aix,all_linux
#               service_description             DNS
#               check_command                   check_nrpe!check_dns_unix -t 30
#               normal_check_interval           240     ; only check every 4 hours
#               notification_options            c,r     ; Send notifications about critical and recovery events
#  If you are using the NRPE method, you will also need a command definition similar to the following on each monitored host
#  in the /usr/local/nagios/nrpe/nrpe.cfg file:
#      command[check_dns_unix]=/usr/local/nagios/libexec/check_dns_unix
#
#
#
# TROUBLESHOOTING
# ---------------
#   If you have trouble with this nagios check, here are a few hints.
#   - confirm SSH key pairs are in place if using the check_by_ssh method
# 
# On Ubuntu 18.x, /bin/sh is symblinked to /bin/dash instead of the more common /bin/bash used by CentOS
# Unfortunately, /bin/dash does not like the == format in a statement like  if [ "$blah" == "somevalue"]; then
# Instead, /bin/dash insists on this format:                                if [ "$blah"  = "somevalue"]; then
# So, be sure to use only a single in your string comparison statements, or you will get this error:
# ./check_dns_unix: 161: [: somevalue: unexpected operator


declare_variables() {
   #
   # nagios return codes - this script returns a value to nagios for processing
   #
   OK=0
   WARN=1
   CRITICAL=2
   UNKNOWN=3
   CHECK_NAME=DNS
   #
   # define variables
   #
   verbose=no
   awk=/usr/bin/awk
   wc=/usr/bin/wc
   tr=/usr/bin/tr
   ps=/bin/ps
   host=/usr/bin/host
   ifconfig=/usr/sbin/ifconfig
   dig=/usr/bin/dig
   ip=/sbin/ip
   if [ -f "/sbin/ip" ];           then ip=/sbin/ip                ; fi	#location on Ubuntu
   if [ -f "/usr/sbin/ip" ];       then ip=/usr/sbin/ip            ; fi	#location on CentOS
   ping=/bin/ping
   if [ -f "/bin/ping" ];          then ping=/bin/ping             ; fi	#location on CentOS
   if [ -f "/etc/ping" ];          then ping=/etc/ping             ; fi	#location on AIX
   grep=/bin/grep
   if [ -f "/bin/grep" ];          then grep=/bin/grep             ; fi	#location on CentOS
   if [ -f "/usr/bin/grep" ];      then grep=/usr/bin/grep         ; fi	#location on AIX
   sed=/usr/bin/sed
   if [ -f "/bin/sed" ];           then sed=/bin/sed               ; fi	#location on CentOS
   if [ -f "/usr/bin/sed" ];       then sed=/usr/bin/sed           ; fi	#location on AIX
   cat=/usr/bin/cat
   if [ -f "/bin/cat" ];           then cat=/bin/cat               ; fi	#location on CentOS
   if [ -f "/usr/bin/cat" ];       then cat=/usr/bin/cat           ; fi	#location on AIX
   hostname=/usr/bin/hostname
   if [ -f "/bin/hostname" ];      then hostname=/bin/hostname     ; fi	#location on CentOS 
   if [ -f "/usr/bin/hostname" ];  then hostname=/usr/bin/hostname ; fi	#location on AIX
   uname=/usr/bin/uname
   if [ -f "/bin/uname" ];         then uname=/bin/uname           ; fi	#location on CentOS
   if [ -f "/usr/bin/uname" ];     then uname=/usr/bin/uname       ; fi	#location on AIX
}




sanity_checks() {
   #
   # Confirm required files exist
   #
   echo $verbose | $grep -q yes && echo confirm required files exist
   #
   # test for the existence of a bunch of utilities by using a quick and dirty for loop
   for testfile in $awk $sed $grep $wc $tr $ps $cat $hostname $uname $host $ping $dig
   do
      if [ ! -f "$testfile" ]; then
         echo "$CHECK_NAME UNKNOWN required file $testfile not found "
         exit $UNKNOWN
      fi
      if [ ! -x "$testfile" ]; then
         echo "$CHECK_NAME UNKNOWN required file $testfile is not executable by the nagios user "
         exit $UNKNOWN
      fi
      # 
      #    
      # Modern linux distros have replaced /usr/sbin/ifconfig with /usr/sbin/ip
      # At least one of these programs must exist
      if [ ! -f "$ifconfig" ] && [ ! -f "$ip" ] ; then
         echo ERROR: Cannot find $ifconfig or $ip - cannot lookup local IP address
         exit $UNKNOWN
      fi
   done
}




get_os() {
   #
   # Confirm the script is running under a supported operating system
   # So far, only AIX and Linux have been tested.  If you test other operating systems, please provide feedback to the author.
   echo $verbose | $grep -q yes && echo Checking operating system
   os=`$uname`
   if [ "$os" = "AIX" ] ; then
      echo $verbose | $grep -q yes && echo "  Detected AIX"
   fi
   if [ "$os" = "Linux" ] ; then
      echo $verbose | $grep -q yes && echo "  Detected Linux"
   fi
   if [ "$os" = "FreeBSD" ] ; then
      echo $CHECK_NAME UNKNOWN detected unsupported $os operating system.  Please test on $os and inform the author if updates are required.
      exit $UNKOWN
   fi
   if [ "$os" = "OpenBSD" ] ; then
      echo $CHECK_NAME UNKNOWN detected unsupported $os operating system.  Please test on $os and inform the author if updates are required.
      exit $UNKOWN
   fi
   if [ "$os" = "NetBSD" ] ; then
      echo $CHECK_NAME UNKNOWN detected unsupported $os operating system.  Please test on $os and inform the author if updates are required.
      exit $UNKOWN
   fi
   if [ "$os" = "MacOS" ] ; then
      echo $CHECK_NAME UNKNOWN detected unsupported $os operating system.  Please test on $os and inform the author if updates are required.
      exit $UNKOWN
   fi
   if [ "$os" = "HP-UX" ] ; then
      echo $CHECK_NAME UNKNOWN detected unsupported $os operating system.  Please test on $os and inform the author if updates are required.
      exit $UNKOWN
   fi
   if [ "$os" = "SunOS" ] ; then
      echo $CHECK_NAME UNKNOWN detected unsupported $os operating system.  Please test on $os and inform the author if updates are required.
      exit $UNKOWN
   fi
}




check_resolv_conf() {
   #
   # Confirm /etc/resolv.conf exists
   #
   # HINT: on Linux hosts using systemd-resolved for name resolution, the /etc/resolv.conf file will be a symlink.  For example:
   # # ls -l /etc/resolv.conf
   #    lrwxrwxrwx 1 root root 39 Apr  9  2018 /etc/resolv.conf -> ../run/systemd/resolve/stub-resolv.conf
   #
   echo $verbose | $grep -q yes && echo confirm /etc/resolv.conf file exists
   #
   if [ ! -e /etc/resolv.conf ]; then
      echo "$CHECK_NAME WARN - Could not find /etc/resolv.conf - needed for name resolution."
      exit $WARN
   fi
   if [ ! -r /etc/resolv.conf ]; then
      echo "$CHECK_NAME WARN - the /etc/resolv.conf file exists, but is not readable by the current user.  Please run chmod +r /etc/resolv.conf"
      exit $WARN
   fi
}




check_resolver() {
   #
   # Figure out if systemd-resolved is being used for name resolution
   # bind is the default on AIX and older versions of Linux.  Ubuntu 18+ use systemd-resolved instead of bind.
   #
   resolver=bind
   test -f /run/systemd/resolve/resolv.conf && resolver=systemd-resolved
}




get_nameserver_list() {
   # Get the list of nameservers
   #
   # If the local machine is not using systemd-resolved for name resolution, get the nameservers from /etc/resolv.conf
   if [ "$resolver" = "bind" ]; then
      nameserver_list=`$grep ^nameserver /etc/resolv.conf | $awk '{print $2}' | $tr -s '\n' ' ' | $sed -e 's/ $//'`
   fi
   #
   # If the local machine is using systemd-resolved for name resolution, get the nameservers from /run/systemd/resolve/resolv.conf
   if [ "$resolver" = "systemd-resolved" ]; then
      echo $verbose | $grep -q yes && echo "Detected systemd-resolved, will use for name resolution."
      nameserver_list=`$grep ^nameserver /run/systemd/resolve/resolv.conf | $awk '{print $2}' | $tr -s '\n' ' ' | $sed -e 's/ $//'`
   fi
   #
   echo $verbose | $grep -q yes && echo "found nameservers $nameserver_list"
}




get_nameserver_count() {
   #
   # Figure out how many nameservers are configured for use
   # Legacy UNIX hosts will have their nameservers listed in /etc/resolv.conf
   # Linux hosts using systemd-resolved will have their nameservers listed in /run/systemd/resolve/resolv.conf
   # The list of nameservers was retrieved in the previous section
   #
   nscount=0
   for i in $nameserver_list ; do
      echo $verbose | $grep -q yes && echo "   nscount = $nscount + 1"
      nscount=`expr $nscount + 1`
   done
   echo $verbose | $grep -q yes && echo    found $nscount name servers $nameserver_list
   #
   #
   if [ $nscount -lt 2 ]; then
      echo "$CHECK_NAME WARN - Only $nscount nameserver entries in /etc/resolv.conf  Please note that the /etc/resolv.conf file should contain at least two nameserver lines."
      exit $WARN
   fi
   if [ $nscount -gt 3 ]; then
      echo "$CHECK_NAME WARN - There are $nscount nameserver entries in /etc/resolv.conf  Please note that the resolver can only use a maximum of 3 nameservers."
      exit $WARN
   fi
}




get_domain_name_systemd_resolved() {
   #
   # if resolver=systemd-resolved, confirm a DNS domain name is defined
   # Sample command ouput:
   # # systemd-resolve --status | tail -n 4
   #   DNS Servers: 8.8.8.8
   #                8.8.4.4
   #   DNS Domain: example.com
   #   search example.com
   #
   if [ "$resolver" = "systemd-resolved" ]; then
      domain_name=unknown
      $grep -q "^DNS Domain" /run/systemd/resolve/resolv.conf && search=`$grep "^DNS Domain" /run/systemd/resolve/resolv.conf | awk '{print $3}'`
      echo $verbose | $grep -q yes && echo Domain name is $domain_name
      search=unknown
      $grep -q ^search /run/systemd/resolve/resolv.conf && search=`$grep ^search /run/systemd/resolve/resolv.conf | awk '{print $2}'` && domain_name=$search
      echo $verbose | $grep -q yes && echo search is $search
      if [ "$domain_name" = "unknown" ] && [ "$search" = "unknown" ]; then
         #for Ubuntu using netplan
         test -d /etc/netplan             && echo "$CHECK_NAME WARN - Missing DNS Domain name from systemd-resolve --status output.  Please define your default domain name in /etc/netplan/*.yml"  && exit $WARN
         #for RHEL using NetworkManager
         test -f /usr/sbin/NetworkManager && echo "$CHECK_NAME WARN - Missing DNS Domain name.  Please define your default domain name with nmcli or in /etc/sysconfig/network-scripts/*"           && exit $WARN  
         # should not get this far
         echo "$CHECK_NAME WARN - Missing DNS Domain name.  Please define your default domain name." && exit $WARN  
      fi
   fi
}




get_domain_name_bind() {
   #
   # if resolver=bind, confirm /etc/resolv.conf contains the "domain" or "search" parameters
   #
   if [ "$resolver" = "bind" ]; then
      domain_name=unknown
      $grep -q ^domain /etc/resolv.conf && domain_name=`$grep ^domain /etc/resolv.conf | awk '{print $2}'`
      search=unknown
      $grep -q ^search /etc/resolv.conf && search=`$grep ^search /etc/resolv.conf | awk '{print $2}'`
      if [ "$domain_name" = "unknown" ] && [ "$search" = "unknown" ]; then
         echo "$CHECK_NAME WARN - Missing domain and search parameters from /etc/resolv.conf.  Please add an entry similar to one or both of the following:  domain example.com  search example.com"
         exit $WARN
      fi
      # 
      # if the domain parameter is missing but the search parameter exists, set the default domain name to the same as the search parameter
      # 
      if [ "$domain_name" = "unknown" ] && [ "$search" != "unknown" ]; then
         domain_name=$search
      fi
      echo $verbose | $grep -q yes && echo Domain name is $domain_name
   fi 
}




ping_name_servers() {
   #
   # ping name servers
   #
   echo $verbose | $grep -q yes && echo ping name servers to confirm they are are available
   #
   # We already have a list of the namservers, so use a for loop for check each nameserver one at a time.
   #
   for nameserver in $nameserver_list ; do
      echo $verbose | $grep -q yes && echo "   pinging name server $nameserver"
      pingreply=unknown
      $ping -c 2 $nameserver | $grep -q "100% packet loss" && pingreply=failed
      if [ "$pingreply" = "failed" ] ; then
         echo "$CHECK_NAME WARN - could not ping name server $nameserver listed in /etc/resolv.conf.  Please confirm that $nameserver is a valid DNS server."
         exit $WARN
      fi
   done
}




check_ipaddr_all_zeros() {
   #
   # Confirm IP address is not 0.0.0.0  or 127.0.1.1
   # This can be caused by a bogus entry in /etc/hosts
   #
   echo $verbose | $grep -q yes && echo confirm IP address is not 0.0.0.0
   #
   # NOTE: the output of the "host" command is slightly different on AIX and Linux
   # On Linux:
   #    $ host myhost.example.com
   #    myhost.example.com has address 192.168.14.19
   #    $ /usr/bin/host host2.example.com
   #    Host host2.example.com not found: 3(NXDOMAIN)
   # On AIX:
   #    $ host myhost.example.com
   #    myhost.example.com is 192.168.14.19
   #    $ /usr/bin/host host2.example.com
   #    host: 0827-801 Host name host2.example.com does not exist.
   #
   echo $verbose | $grep -q yes && echo "   getting hostname with: $hostname -s"
   host_name=`$hostname -s`
   echo $verbose | $grep -q yes && echo "   getting IP address with: $host $host_name.$domain_name"
   x=`$host $host_name.$domain_name 2>&1`
   echo $x | $grep -q -E "not found|does not exist" && host_ip=unknown
   echo $x | $grep -q -E " is |has address"         && host_ip=`echo $x | $sed -e 's/ is / /g' | $sed -e 's/ has address / /g' | $awk '{print $2}' | $sed -e 's/,//g'`
   echo $verbose | $grep -q yes && echo "   hostname is $host_name , host_ip is $host_ip"
   if [ "$host_ip" = "0.0.0.0" ]; then
      echo "$CHECK_NAME WARN - Found bogus IP address of 0.0.0.0 for $host_name.  Please check for bogus entries in the /etc/hosts file."
      exit $WARN
   fi
   if [ "$host_ip" = "127.0.1.1" ]; then
      echo "$CHECK_NAME WARN - Found bogus IP address of 127.0.1.1 for $host_name.  Please check for bogus entries in the /etc/hosts file."
      exit $WARN
   fi
}




check_forward_resolution() {
   #
   # Confirm A record for the current hostname exists in DNS for forward resolution
   #
   # This section confirms there is a valid A record for the current hostname in DNS
   #
   #
   # perform dns lookup against each name server
   #
   # We already have a list of nameservers, so use a for loop to check each nameserver one at a time.
   for nameserver in $nameserver_list ; do
      host_name=`$hostname -s`
      #
      # skip check if this is a DMZ host using assorted public name servers
      # if the host is using a public DNS server, the local hostname will not be resolvable by the public DNS server
      if [ "$nameserver" = "8.8.8.8"         ] ; then continue ; fi   #Google public DNS
      if [ "$nameserver" = "8.8.4.4"         ] ; then continue ; fi   #Google public DNS
      if [ "$nameserver" = "208.67.222.222"  ] ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "208.67.220.220"  ] ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "208.67.220.123"  ] ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "208.67.222.123"  ] ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "1.1.1.1"         ] ; then continue ; fi   #Cloudflare public DNS
      if [ "$nameserver" = "1.0.0.1"         ] ; then continue ; fi   #Cloudflare public DNS
      if [ "$nameserver" = "9.9.9.9"         ] ; then continue ; fi   #Quad9 public DNS
      if [ "$nameserver" = "149.112.112.112" ] ; then continue ; fi   #Quad9 public DNS
      #
      dnscheck=fail
      echo $verbose | $grep -q yes && echo Checking name resolution for hostname $host_name.$domain_name A record against $nameserver DNS server
      echo $verbose | $grep -q yes && echo "   running command:  $dig @$nameserver $host_name.$domain_name A | $grep -v '^;'"
      $dig @$nameserver $host_name.$domain_name A  | $grep -v '^;' | $grep -q -i $host_name && dnscheck=succeed && echo $verbose | $grep -q yes && echo "   command succeeded"
      if [ "$dnscheck" = "fail" ]; then
         echo "$CHECK_NAME WARN - Could not find an A record for $host_name in DNS.  Forward DNS lookups for $host_name are failing against the $nameserver DNS server.  Please ask the DNS administrator to add an A record for $host_name on the $nameserver DNS server."
         exit $WARN
      fi
   done
}




check_forward_resolution_localhost() {
   #
   # Confirm A record for localhost exists in DNS for forward resolution
   #
   # This section confirms a valid A record exists for localhost in DNS
   # Please note that unlike the previous section, we only search for "localhost" instead of "localhost.mydomain.com"
   #
   #
   # perform dns lookup against each name server
   #
   # We already have a list of nameservers, so use a for loop for check each nameserver one at a time.
   for nameserver in $nameserver_list ; do
      localhost_name=localhost
      #
      # skip check if this is a DMZ host using assorted public name servers
      # if the host is using a public DNS server, the hostname localhost may or may not be resolvable by the public DNS server
      if [ "$nameserver" = "8.8.8.8" ]         ; then continue ; fi   #Google public DNS
      if [ "$nameserver" = "8.8.4.4" ]         ; then continue ; fi   #Google public DNS
      if [ "$nameserver" = "208.67.222.222" ]  ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "208.67.220.220" ]  ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "208.67.220.123" ]  ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "208.67.222.123" ]  ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "1.1.1.1" ]         ; then continue ; fi   #Cloudflare public DNS
      if [ "$nameserver" = "1.0.0.1" ]         ; then continue ; fi   #Cloudflare public DNS
      if [ "$nameserver" = "9.9.9.9" ]         ; then continue ; fi   #Quad9 public DNS
      if [ "$nameserver" = "149.112.112.112" ] ; then continue ; fi   #Quad9 public DNS
      #
      dnscheck=fail
      echo $verbose | $grep -q yes && echo Checking forward name resolution for hostname $localhost_name A record against $nameserver DNS server
      echo $verbose | $grep -q yes && echo "   running command:  $dig @$nameserver $localhost_name A | $grep -v '^;'"
      $dig @$nameserver $localhost_name A  | $grep -v '^;' | $grep -q -i $localhost_name && dnscheck=succeed && echo $verbose | $grep -q yes && echo "   command succeeded"
      if [ "$dnscheck" = "fail" ]; then
         echo "$CHECK_NAME WARN - Could not find an A record for $localhost_name in DNS.  Forward DNS lookups for $localhost_name are failing against the $nameserver DNS server.  Please ask the DNS administrator to add an A record for $localhost_name on the $nameserver DNS server."
         exit $WARN
      fi
   done
}




check_reverse_resolution() {
   #
   # Confirm PTR record for the current hostname exists in DNS for reverse resolution
   #
   # This confirms valid PTR records exist in DNS
   #
   #
   # perform reverse dns lookup against each name server
   #
   # NOTE: the output of the "host" command is slightly different on AIX and Linux
   # On Linux:
   #  $ host myhost.example.com
   #  myhost.example.com has address 192.168.14.19
   # On AIX:
   #  $ host myhost.example.com
   #  myhost.example.com is 192.168.14.19
   #
   # We already have a list of nameservers, so use a for loop to run queries against each nameserver
   for nameserver in $nameserver_list ; do
      host_name=`$hostname -s`
      # xxx host_ip=`$host $host_name.$domain_name | $sed -e "s/ is / /g" | $sed -e "s/ has address / /g" | $awk '{print $2}' | $sed -e "s/,//g"`
      #
      # The dig utility will show the PTR record using in-addr.arpa format.
      # For example, the IP address 1.2.3.4 will be displayed as 4.3.2.1.in-addr.arpa
      in_addr_arpa=`echo $host_ip | awk -F . '{print $4 "." $3 "." $2 "." $1 ".in-addr.arpa"}'`
      #
      #
      # Skip check if this is a DMZ host using assorted public name servers
      # If the host is using a public DNS server, the local hostname will not be resolvable by the public DNS server
      # The "continue" command skips to the next iteration of the for loop
      if [ "$nameserver" = "8.8.8.8" ]         ; then continue ; fi   #Google public DNS
      if [ "$nameserver" = "8.8.4.4" ]         ; then continue ; fi   #Google public DNS
      if [ "$nameserver" = "208.67.222.222" ]  ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "208.67.220.220" ]  ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "208.67.220.123" ]  ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "208.67.222.123" ]  ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "1.1.1.1" ]         ; then continue ; fi   #Cloudflare public DNS
      if [ "$nameserver" = "1.0.0.1" ]         ; then continue ; fi   #Cloudflare public DNS
      if [ "$nameserver" = "9.9.9.9" ]         ; then continue ; fi   #Quad9 public DNS
      if [ "$nameserver" = "149.112.112.112" ] ; then continue ; fi   #Quad9 public DNS
      #
      #
      # This section will tell us if the PTR record exists, but will not tell us if the IP address described in the PTR record is bound to a local network interface.
      # In other words, this section confirms the PTR record exists, but not that the PTR record points at the correct host.
      #
      dnscheck=fail
      echo $verbose | $grep -q yes && echo "Checking reverse name resolution for IP address $host_ip or $in_addr_arpa PTR record against $nameserver name server"
      echo $verbose | $grep -q yes && echo "   running command:  $dig @$nameserver -x $host_ip | $grep -v '^;' | $grep $in_addr_arpa  "
      $dig @$nameserver -x $host_ip  | $grep -v '^;' | $grep -q -i $in_addr_arpa && dnscheck=succeed && echo $verbose | $grep -q yes && echo "   command succeeded"
      if [ "$dnscheck" = "fail" ]; then
         echo "$CHECK_NAME WARN - Could not find a PTR record for $host_ip in DNS.  Reverse DNS lookups for $host_name.$domain_name are failing against the $nameserver DNS server.  Please ask the DNS administrator to add a PTR record for IP address $host_ip pointing at hostname $host_name.$domain_name on the $nameserver DNS server."
         exit $WARN
      fi
      #
      # At this point, we know that the PTR record exists, so now we check to confirm that IP address is bound to a local network interface.
      # This allows us to differentiate between a PTR record not existing and a PTR record that points at the wrong host.
      #
      echo $verbose | $grep -q yes && echo "Confirming $host_ip is bound to a local network interface"
      if [ -f "$ip" ]; then		#modern Linux distros have replaced /usr/sbin/ifconfig with /usr/sbin/ip
         dnscheck=fail
         echo $verbose | $grep -q yes && echo "   running command:  $ip addr show | $grep -i $host_ip "
         $ip addr show | $grep -q -i $host_ip && dnscheck=succeed && echo $verbose | $grep -q yes && echo "   command succeeded"
         if [ "$dnscheck" = "fail" ]; then
            echo "$CHECK_NAME WARN - PTR record for $host_ip is pointing at hostname $host_name, but the IP address $host_ip is not bound to any network interface on $host_name. Please fix up the A and PTR records for hostname $host_name on DNS server $nameserver, or add IP address $host_ip to a network interface on $host_name"
            exit $WARN
         fi
      fi
      if [ -f "$ifconfig" ]; then	#legacy Linux distros and AIX are still using /usr/sbin/ifconfig instead of /usr/sbin/ip
         dnscheck=fail
         echo $verbose | $grep -q yes && echo "   running command:  $ifconfig -a | $grep -i $host_ip "
         $ifconfig -a | $grep -q $host_ip && dnscheck=succeed && echo $verbose | $grep -q yes && echo "   command succeeded"
         if [ "$dnscheck" = "fail" ]; then
            echo "$CHECK_NAME WARN - PTR record for $host_ip is pointing at hostname $host_name, but the IP address $host_ip is not bound to any network interface on $host_name. Please fix up the A and PTR records for hostname $host_name on DNS server $nameserver, or add IP address $host_ip to a network interface on $host_name"
            exit $WARN
         fi
      fi
   done
}




check_reverse_resolution_127_0_0_1() {
   #
   # Confirm PTR record for 127.0.0.1 exists in DNS for reverse resolution
   #
   echo $verbose | $grep -q yes && echo Confirm PTR record exists for 127.0.0.1
   # This confirms valid PTR record for localhost exist in DNS
   #
   #
   # perform reverse dns lookup against each name server
   #
   # NOTE: the output of the "host" command is slightly different on AIX and Linux
   # On Linux:
   #  $ host localhost
   #  localhost has address 127.0.0.1
   # On AIX:
   #  $ host localhost
   #  localhost is 127.0.0.1
   #
   # We already have a list of nameservers, so use a for loop to run queries against each nameserver
   for nameserver in $nameserver_list ; do
      localhost_name=localhost
      localhost_ip=127.0.0.1
      #
      # The dig utility will show the PTR record using in-addr.arpa format.
      # For example, the IP address 1.2.3.4 will be displayed as 4.3.2.1.in-addr.arpa
      in_addr_arpa=`echo $localhost_ip | awk -F . '{print $4 "." $3 "." $2 "." $1 ".in-addr.arpa"}'`
      #
      #
      # Skip check if this is a DMZ host using assorted public name servers
      # If the host is using a public DNS server, the 127.0.0.1 IP address may or may not be resolvable by the public DNS server
      # The "continue" command skips to the next iteration of the for loop
      if [ "$nameserver" = "8.8.8.8" ]         ; then continue ; fi   #Google public DNS
      if [ "$nameserver" = "8.8.4.4" ]         ; then continue ; fi   #Google public DNS
      if [ "$nameserver" = "208.67.222.222" ]  ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "208.67.220.220" ]  ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "208.67.220.123" ]  ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "208.67.222.123" ]  ; then continue ; fi   #OpenDNS
      if [ "$nameserver" = "1.1.1.1" ]         ; then continue ; fi   #Cloudflare public DNS
      if [ "$nameserver" = "1.0.0.1" ]         ; then continue ; fi   #Cloudflare public DNS
      if [ "$nameserver" = "9.9.9.9" ]         ; then continue ; fi   #Quad9 public DNS
      if [ "$nameserver" = "149.112.112.112" ] ; then continue ; fi   #Quad9 public DNS
      #
      dnscheck=fail
      echo $verbose | $grep -q yes && echo "Checking reverse name resolution for IP address $localhost_ip or $in_addr_arpa PTR record against $nameserver name server"
      #
      # We want to differentiate the PTR not existing at all from the PTR existing but pointing at the wrong A record.
      # This section only checks to see if the PTR record exists, but does not confirm it points to the correct A record.
      #
      echo $verbose | $grep -q yes && echo "   running command:  $dig @$nameserver -x $localhost_ip | $grep -v '^;' | $grep $in_addr_arpa  "
      $dig @$nameserver -x $localhost_ip  | $grep -v '^;' | $grep -q -i $in_addr_arpa && dnscheck=succeed && echo $verbose | $grep -q yes && echo "   command succeeded"
      if [ "$dnscheck" = "fail" ]; then
         echo "$CHECK_NAME WARN - Could not find a PTR record for $localhost_ip in DNS.  Reverse DNS lookups for $localhost_name are failing against the $nameserver DNS server.  Please ask the DNS administrator to add a PTR record for $localhost_name on the $nameserver DNS server."
         exit $WARN
      fi
      #
      # We want to differentiate the PTR not existing at all from the PTR existing but pointing at the wrong A record.
      # We have already confirmed the PTR record exists, so this section confirms the PTR record points at the correct A record.
      #
      echo $verbose | $grep -q yes && echo "   running command:  $dig @$nameserver -x $localhost_ip | $grep -v '^;' | $grep -i $in_addr_arpa | $grep -i $localhost_name  "
      $dig @$nameserver -x $localhost_ip  | $grep -v '^;' | $grep -i $in_addr_arpa | $grep -q -i $localhost_name && dnscheck=succeed && echo $verbose | $grep -q yes && echo "   command succeeded"
      if [ "$dnscheck" = "fail" ]; then
         echo "$CHECK_NAME WARN - PTR record for $localhost_ip exists in DNS, but does not point at the correct hostname. Please ask the DNS administrator to update the $localhost_ip PTR record to point at $localhost_name"
         exit $WARN
      fi
      #
      # At this point, we know that the PTR record exists, so now we check to confirm that IP address is bound to a local network interface.
      # This allows us to differentiate between a PTR record not existing and a PTR record that points at the wrong host.
      #
      echo $verbose | $grep -q yes && echo "Confirming $localhost_ip is bound to a local network interface"
      if [ -f "$ip" ]; then		#modern Linux distros have replaced /usr/sbin/ifconfig with /usr/sbin/ip
         dnscheck=fail
         echo $verbose | $grep -q yes && echo "   running command:  $ip addr show | $grep -i $localhost_ip "
         $ip addr show | $grep -q -i $localhost_ip && dnscheck=succeed && echo $verbose | $grep -q yes && echo "   command succeeded"
         if [ "$dnscheck" = "fail" ]; then
            echo "$CHECK_NAME WARN - PTR record for $localhost_ip is pointing at the wrong hostname. Please ask the DNS administrator to update the PTR record for IP address $localhost_ip to point at hostname $localhost_name on the $nameserver DNS server."
            exit $WARN
         fi
      fi
      if [ -f "$ifconfig" ]; then	#legacy Linux distros and AIX are still using /usr/sbin/ifconfig instead of /usr/sbin/ip
         dnscheck=fail
         echo $verbose | $grep -q yes && echo "   running command:  $ifconfig -a | $grep -i $localhost_ip "
         $ifconfig -a | $grep -q $localhost_ip && dnscheck=succeed && echo $verbose | $grep -q yes && echo "   command succeeded"
         if [ "$dnscheck" = "fail" ]; then
            echo "$CHECK_NAME WARN - PTR record for $localhost_ip is pointing at the wrong hostname. Please ask the DNS administrator to update the PTR record for IP address $localhost_ip to point at hostname $localhost_name on the $nameserver DNS server."
            exit $WARN
         fi
      fi
   done
}




check_aix_netsvc() {
   #
   # For AIX hosts, confirm the order used for name resolution is the local /etc/hosts file, followed by DNS.
   #
   if [ "$os" = "AIX" ] ; then
      echo $verbose | $grep -q yes && echo Confirm AIX name resolution order is /etc/hosts following by DNS
      if [ ! -f "/etc/netsvc.conf" ] ; then
         echo "$CHECK_NAME WARN cannot find /etc/netsvc.conf, which is used by AIX for determining name resolution order.  Please ensure the file exists."
         exit $WARN
      fi  
      if [ ! -r "/etc/netsvc.conf" ] ; then
         echo "$CHECK_NAME WARN /etc/netsvc.conf is not readable by the current user.  Please check file permissions."
         exit $WARN
      fi  
      netsvc_conf=unknown
      $grep -q -E "^hosts=local,bind|^hosts=local4,bind4|^hosts = local,bind|^hosts = local4,bind4" /etc/netsvc.conf && netsvc_conf=ok
      if [ "$netsvc_conf" != "ok" ] ; then
         echo "$CHECK_NAME WARN name resolution order should be /etc/hosts first, then DNS second.  Please add the following to /etc/netsvc.conf: hosts = local,bind"
         exit $WARN
      fi
   fi
}




check_aix_ipv6_loopback() {
   #
   # For AIX hosts, confirm lo0 ethernet adapter has an IPv6 address of ::1
   # This is required for the SNMP daemons on AIX 7.x
   #
   if [ "$os" = "AIX" ] ; then
      oslevel | $grep -q ^7 && aixversion=aix7
      # check to see if AIX 7.1 or later.  AIX 5.x and 6.x do not require IPv6.
      if [ "$aixversion" = "aix7" ]; then
         echo $verbose | $grep -q yes && echo Confirming IPv6 loopback address of ::1
         ipv6_loopback=unknown
         $ifconfig lo0 |  $grep -q "inet6 ::1" && ipv6_loopback=true
         if [ "$ipv6_loopback" = "unknown" ]; then
            echo "$CHECK_NAME WARN - cannot find IPv6 address ::1 bound to loopback adapter lo0.  This IPv6 loopback address is required for the SNMP daemons to query data from the xmd MIB.  Please add the IPv6 loopback address with this command:   chdev -l lo0 -a netaddr6=::1 "
            exit $WARN
         fi
      fi
   fi
}




print_output() {
   #
   # If we get this far, everything is good
   #
   host_name=`$hostname -s`
   perf_data="nameserver_count=$nscount;;;;"
   echo "$CHECK_NAME OK hostname=$host_name.$domain_name ipaddr=$host_ip localhost=$localhost_ip resolver=$resolver nameservers=$nameserver_list | $perf_data "
   exit $OK
}



# ----------------- main body of script ----------------------
declare_variables
sanity_checks
get_os
check_resolv_conf
check_resolver
get_nameserver_list 
get_nameserver_count
get_domain_name_systemd_resolved 
get_domain_name_bind
ping_name_servers
check_ipaddr_all_zeros 
check_forward_resolution
check_forward_resolution_localhost 
check_reverse_resolution
check_reverse_resolution_127_0_0_1
check_aix_netsvc
check_aix_ipv6_loopback 
print_output

